import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import TicTacToe from './TicTacToe';
import Icon from '@/components/ui/icon';

type Player = 'X' | 'O' | null;

interface TicTacToeRecord {
  winner: string;
  date: string;
  moves: number;
}

interface TicTacToeGameScreenProps {
  onBackToGameSelection: () => void;
}

export default function TicTacToeGameScreen({ onBackToGameSelection }: TicTacToeGameScreenProps) {
  const [gameState, setGameState] = useState<'menu' | 'playing' | 'gameOver'>('menu');
  const [gameResult, setGameResult] = useState<{ winner: Player; isDraw: boolean } | null>(null);
  const [records, setRecords] = useState<TicTacToeRecord[]>([]);
  const [gamesPlayed, setGamesPlayed] = useState(0);

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ localStorage
  useEffect(() => {
    const saved = localStorage.getItem('tictactoe-records');
    if (saved) {
      setRecords(JSON.parse(saved));
    }
    const played = localStorage.getItem('tictactoe-games-played');
    if (played) {
      setGamesPlayed(parseInt(played));
    }
  }, []);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
  const saveGameResult = (winner: Player, isDraw: boolean) => {
    const newRecord: TicTacToeRecord = {
      winner: isDraw ? '–ù–∏—á—å—è' : winner === 'X' ? '–ö—Ä–µ—Å—Ç–∏–∫–∏' : '–ù–æ–ª–∏–∫–∏',
      date: new Date().toLocaleDateString('ru-RU'),
      moves: gamesPlayed + 1
    };

    const updatedRecords = [...records, newRecord].slice(-20); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∏–≥—Ä
    const newGamesPlayed = gamesPlayed + 1;

    setRecords(updatedRecords);
    setGamesPlayed(newGamesPlayed);
    localStorage.setItem('tictactoe-records', JSON.stringify(updatedRecords));
    localStorage.setItem('tictactoe-games-played', newGamesPlayed.toString());
  };

  const handleGameStart = () => {
    setGameState('playing');
    setGameResult(null);
  };

  const handleGameOver = (winner: Player, isDraw: boolean) => {
    setGameResult({ winner, isDraw });
    saveGameResult(winner, isDraw);
    setGameState('gameOver');
  };

  const handleBackToMenu = () => {
    setGameState('menu');
  };

  // –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const stats = {
    total: records.length,
    xWins: records.filter(r => r.winner === '–ö—Ä–µ—Å—Ç–∏–∫–∏').length,
    oWins: records.filter(r => r.winner === '–ù–æ–ª–∏–∫–∏').length,
    draws: records.filter(r => r.winner === '–ù–∏—á—å—è').length
  };

  // –≠–∫—Ä–∞–Ω –º–µ–Ω—é
  if (gameState === 'menu') {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-green-50 flex flex-col items-center justify-center p-8">
        <div className="text-center space-y-8 max-w-md w-full">
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
          <div className="space-y-4">
            <h1 className="text-5xl font-bold bg-gradient-to-r from-blue-600 to-red-500 bg-clip-text text-transparent">
              –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏
            </h1>
            <p className="text-lg text-muted-foreground">
              –°–æ–∑–¥–∞—Ç–µ–ª—å German
            </p>
          </div>

          {/* –ö–Ω–æ–ø–∫–∞ –Ω–∞—á–∞—Ç—å */}
          <Button 
            onClick={handleGameStart}
            size="lg"
            className="w-full h-14 text-lg font-semibold bg-gradient-to-r from-blue-500 to-red-500 hover:from-blue-600 hover:to-red-600 transition-all duration-300 transform hover:scale-105"
          >
            <Icon name="Play" size={24} className="mr-2" />
            –ù–∞—á–∞—Ç—å –∏–≥—Ä—É
          </Button>

          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
          {stats.total > 0 && (
            <Card className="p-6 bg-white/80 backdrop-blur-sm">
              <h2 className="text-xl font-semibold mb-4 text-center flex items-center justify-center gap-2">
                <Icon name="BarChart3" size={20} className="text-blue-500" />
                –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
              </h2>
              <div className="grid grid-cols-2 gap-4 text-center">
                <div>
                  <div className="text-2xl font-bold text-blue-600">{stats.xWins}</div>
                  <div className="text-sm text-muted-foreground">–ü–æ–±–µ–¥ –∫—Ä–µ—Å—Ç–∏–∫–æ–≤</div>
                </div>
                <div>
                  <div className="text-2xl font-bold text-red-500">{stats.oWins}</div>
                  <div className="text-sm text-muted-foreground">–ü–æ–±–µ–¥ –Ω–æ–ª–∏–∫–æ–≤</div>
                </div>
                <div>
                  <div className="text-2xl font-bold text-gray-600">{stats.draws}</div>
                  <div className="text-sm text-muted-foreground">–ù–∏—á—å–∏—Ö</div>
                </div>
                <div>
                  <div className="text-2xl font-bold text-purple-600">{stats.total}</div>
                  <div className="text-sm text-muted-foreground">–í—Å–µ–≥–æ –∏–≥—Ä</div>
                </div>
              </div>
            </Card>
          )}

          {/* –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã */}
          {records.length > 0 && (
            <Card className="p-4 bg-white/60 backdrop-blur-sm">
              <h3 className="font-semibold mb-3 text-center">–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–≥—Ä—ã</h3>
              <div className="space-y-2 max-h-32 overflow-y-auto">
                {records.slice(-5).reverse().map((record, index) => (
                  <div key={index} className="flex justify-between items-center text-sm">
                    <span className={`font-medium ${
                      record.winner === '–ö—Ä–µ—Å—Ç–∏–∫–∏' ? 'text-blue-600' :
                      record.winner === '–ù–æ–ª–∏–∫–∏' ? 'text-red-500' : 'text-gray-600'
                    }`}>
                      {record.winner === '–ù–∏—á—å—è' ? 'ü§ù –ù–∏—á—å—è' : 
                       record.winner === '–ö—Ä–µ—Å—Ç–∏–∫–∏' ? '‚ùå –ö—Ä–µ—Å—Ç–∏–∫–∏' : '‚≠ï –ù–æ–ª–∏–∫–∏'}
                    </span>
                    <span className="text-muted-foreground text-xs">{record.date}</span>
                  </div>
                ))}
              </div>
            </Card>
          )}

          {/* –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ */}
          <Button 
            onClick={onBackToGameSelection}
            variant="outline"
            size="lg"
            className="w-full h-12 text-lg"
          >
            <Icon name="ArrowLeft" size={20} className="mr-2" />
            –í—ã–±–æ—Ä –∏–≥—Ä—ã
          </Button>
        </div>
      </div>
    );
  }

  // –ò–≥—Ä–∞
  if (gameState === 'playing') {
    return (
      <TicTacToe 
        onGameOver={handleGameOver}
        onBackToMenu={handleBackToMenu}
      />
    );
  }

  // Game Over
  if (gameState === 'gameOver' && gameResult) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-50 via-white to-yellow-50 flex flex-col items-center justify-center p-8">
        <div className="text-center space-y-8 max-w-md w-full">
          {/* –†–µ–∑—É–ª—å—Ç–∞—Ç */}
          <div className="space-y-4">
            {gameResult.isDraw ? (
              <>
                <h1 className="text-6xl">ü§ù</h1>
                <h2 className="text-4xl font-bold text-gray-600">–ù–∏—á—å—è!</h2>
                <p className="text-lg text-muted-foreground">–•–æ—Ä–æ—à–∞—è –∏–≥—Ä–∞!</p>
              </>
            ) : (
              <>
                <h1 className="text-6xl">
                  {gameResult.winner === 'X' ? '‚ùå' : '‚≠ï'}
                </h1>
                <h2 className={`text-4xl font-bold ${
                  gameResult.winner === 'X' ? 'text-blue-600' : 'text-red-500'
                }`}>
                  {gameResult.winner === 'X' ? '–ö—Ä–µ—Å—Ç–∏–∫–∏' : '–ù–æ–ª–∏–∫–∏'} –ø–æ–±–µ–∂–¥–∞—é—Ç!
                </h2>
                <p className="text-lg text-muted-foreground">
                  {gameResult.winner === 'O' ? '–°–¥—É–ª—Å—è –õ–û–•' : '–û—Ç–ª–∏—á–Ω–∞—è –∏–≥—Ä–∞!'}
                </p>
              </>
            )}
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ */}
          <div className="space-y-3">
            <Button 
              onClick={handleGameStart}
              size="lg"
              className="w-full h-12 text-lg font-semibold bg-gradient-to-r from-green-500 to-green-600 hover:from-green-600 hover:to-green-700"
            >
              <Icon name="RotateCcw" size={20} className="mr-2" />
              –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞
            </Button>
            <Button 
              onClick={handleBackToMenu}
              variant="outline"
              size="lg"
              className="w-full h-12 text-lg"
            >
              <Icon name="ArrowLeft" size={20} className="mr-2" />
              –í –º–µ–Ω—é
            </Button>
          </div>

          {/* –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
          <Card className="p-4 bg-white/80 backdrop-blur-sm">
            <h3 className="font-semibold mb-3 text-center">–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
            <div className="grid grid-cols-2 gap-4 text-center text-sm">
              <div>
                <div className="text-xl font-bold text-blue-600">{stats.xWins}</div>
                <div className="text-muted-foreground">–ö—Ä–µ—Å—Ç–∏–∫–∏</div>
              </div>
              <div>
                <div className="text-xl font-bold text-red-500">{stats.oWins}</div>
                <div className="text-muted-foreground">–ù–æ–ª–∏–∫–∏</div>
              </div>
            </div>
            <div className="mt-3 pt-3 border-t text-center">
              <div className="text-lg font-bold text-gray-600">{stats.draws} –Ω–∏—á—å–∏—Ö</div>
            </div>
          </Card>
        </div>
      </div>
    );
  }

  return null;
}